// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Core User and Role Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials authentication
  role          String    @default("SITE_MANAGER")
  company       String?   // Company name
  phone         String?   // Phone number
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts           Account[]
  sessions           Session[]
  projectAssignments ProjectAssignment[]
  workRecords        WorkRecord[]
  qualityRecords     QualityRecord[]
  paymentRecords     PaymentRecord[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// UserRole: EXECUTIVE, SITE_MANAGER, WAREHOUSE, TECHNICAL_OFFICE, QUALITY_CONTROL, ADMIN

// Project Hierarchy Models
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectType String   @map("project_type") // residential, commercial, industrial, infrastructure
  status      String   @default("PLANNING") // PLANNING, ACTIVE, COMPLETED, CANCELLED
  startDate   DateTime @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  buildings           Building[]
  projectAssignments  ProjectAssignment[]
  constructionActivities ConstructionActivity[]

  @@map("projects")
}

model Building {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  name      String   // Building A, Phase 1, Tower North
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  floors  Floor[]

  @@map("buildings")
}

model Floor {
  id         String   @id @default(cuid())
  buildingId String   @map("building_id")
  name       String   // Floor 1, Section A, Wing East
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  units    Unit[]

  @@map("floors")
}

model Unit {
  id        String   @id @default(cuid())
  floorId   String   @map("floor_id")
  name      String   // Unit 101, EA-1, Suite A
  unitType  String?  @map("unit_type") // apartment, house, office, retail, warehouse
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  floor       Floor         @relation(fields: [floorId], references: [id], onDelete: Cascade)
  workRecords WorkRecord[]

  @@map("units")
}

// Construction Activity and Work Models
model ConstructionActivity {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  name        String   // Partida name
  description String?
  sequence    Int      // Order in construction process
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workRecords WorkRecord[]

  @@map("construction_activities")
}

model WorkRecord {
  id                    String   @id @default(cuid())
  unitId                String   @map("unit_id")
  constructionActivityId String  @map("construction_activity_id")
  userId                String   @map("user_id") // Who recorded the work
  status                String @default("ASSIGNED")
  executionDate         DateTime? @map("execution_date")
  quantity              Decimal?
  notes                 String?
  latitude              Decimal? // GPS coordinates
  longitude             Decimal?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  unit                Unit                @relation(fields: [unitId], references: [id], onDelete: Cascade)
  constructionActivity ConstructionActivity @relation(fields: [constructionActivityId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id])
  materialRecords     MaterialRecord[]
  qualityRecords      QualityRecord[]
  paymentRecords      PaymentRecord[]
  photos              Photo[]

  @@map("work_records")
}

// WorkStatus: ASSIGNED, MATERIALS_PLANNED, MATERIALS_PURCHASED, MATERIALS_AVAILABLE, MATERIALS_DELIVERED, EXECUTED, QUALITY_SUBMITTED, QUALITY_RECEIVED, QUALITY_APPROVED, COMPLETED, PAID

// Material Management Models
model MaterialRecord {
  id           String   @id @default(cuid())
  workRecordId String   @map("work_record_id")
  materialName String   @map("material_name")
  quantity     Decimal
  unit         String   // m2, m3, kg, units, etc.
  status       String @default("PLANNED")
  cost         Decimal?
  supplier     String?
  deliveryDate DateTime? @map("delivery_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  workRecord WorkRecord @relation(fields: [workRecordId], references: [id], onDelete: Cascade)

  @@map("material_records")
}

// MaterialStatus: PLANNED, REQUESTED, PURCHASED, IN_WAREHOUSE, DELIVERED, INSTALLED

// Quality Control Models
model QualityRecord {
  id             String   @id @default(cuid())
  workRecordId   String   @map("work_record_id")
  userId         String   @map("user_id") // Quality inspector
  status         String @default("PENDING")
  inspectionDate DateTime? @map("inspection_date")
  notes          String?
  checklist      String?  // Flexible checklist structure as JSON string
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  workRecord WorkRecord @relation(fields: [workRecordId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])
  photos     Photo[]

  @@map("quality_records")
}

// QualityStatus: PENDING, IN_PROGRESS, APPROVED, REJECTED, CORRECTIVE_ACTION_REQUIRED

// Payment Models
model PaymentRecord {
  id           String   @id @default(cuid())
  workRecordId String   @map("work_record_id")
  userId       String   @map("user_id") // Who authorized payment
  amount       Decimal
  paymentDate  DateTime? @map("payment_date")
  status       String @default("PENDING")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  workRecord WorkRecord @relation(fields: [workRecordId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  @@map("payment_records")
}

// PaymentStatus: PENDING, APPROVED, PAID, CANCELLED

// File Management Models
model Photo {
  id             String   @id @default(cuid())
  workRecordId   String?  @map("work_record_id")
  qualityRecordId String? @map("quality_record_id")
  filename       String
  url            String
  description    String?
  latitude       Decimal? // GPS coordinates
  longitude      Decimal?
  createdAt      DateTime @default(now()) @map("created_at")

  workRecord    WorkRecord?    @relation(fields: [workRecordId], references: [id], onDelete: Cascade)
  qualityRecord QualityRecord? @relation(fields: [qualityRecordId], references: [id], onDelete: Cascade)

  @@map("photos")
}

// Project Assignment Models
model ProjectAssignment {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  role      String   // Role within this specific project
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_assignments")
}